package ca.bcit.comp3717.a00950911.opendata.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DATASET".
 */
public class DatasetDao extends AbstractDao<Dataset, Long> {

    public static final String TABLENAME = "DATASET";

    public DatasetDao(DaoConfig config) {
        super(config);
    }


    public DatasetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATASET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CAT_ID\" INTEGER," + // 1: cat_id
                "\"SET_NAME\" TEXT NOT NULL ," + // 2: set_name
                "\"INFO_ABOUT\" TEXT NOT NULL );"); // 3: info_about
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATASET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dataset entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long cat_id = entity.getCat_id();
        if (cat_id != null) {
            stmt.bindLong(2, cat_id);
        }
        stmt.bindString(3, entity.getSet_name());
        stmt.bindString(4, entity.getInfo_about());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dataset entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long cat_id = entity.getCat_id();
        if (cat_id != null) {
            stmt.bindLong(2, cat_id);
        }
        stmt.bindString(3, entity.getSet_name());
        stmt.bindString(4, entity.getInfo_about());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Dataset readEntity(Cursor cursor, int offset) {
        Dataset entity = new Dataset( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // cat_id
                cursor.getString(offset + 2), // set_name
                cursor.getString(offset + 3) // info_about
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Dataset entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCat_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSet_name(cursor.getString(offset + 2));
        entity.setInfo_about(cursor.getString(offset + 3));
    }

    @Override
    protected final Long updateKeyAfterInsert(Dataset entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Dataset entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dataset entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Dataset.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cat_id = new Property(1, Long.class, "cat_id", false, "CAT_ID");
        public final static Property Set_name = new Property(2, String.class, "set_name", false, "SET_NAME");
        public final static Property Info_about = new Property(3, String.class, "info_about", false, "INFO_ABOUT");
    }

}
